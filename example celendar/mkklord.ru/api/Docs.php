<?php
/**
 * Extension for Simpla
 * File is autogenerated 11.03.2020 21:24:52 by CRUD 
 * @author Ruslan Kopyl
 */
require_once 'Simpla.php';

class Docs extends Simpla
{
	public function get_doc($id)
	{
		$query = $this->db->placehold("
            SELECT * 
            FROM __docs
            WHERE id = ?
        ", (int)$id);
        $this->db->query($query);
        if ($result = $this->db->result())
        {
            $result->filename_short = $this->create_short_filename($result->filename);
            $result->icon = $this->create_icon($result->filename);
        }
	
        return $result;
    }
    
	public function get_docs($filter = array())
	{
		$id_filter = '';
        $visible_filter = '';
        $in_info_filter = '';
        $in_register_filter = '';
        $keyword_filter = '';
        $limit = 1000;
		$page = 1;
        
        if (!empty($filter['id']))
            $id_filter = $this->db->placehold("AND id IN (?@)", array_map('intval', (array)$filter['id']));
        
        if (isset($filter['visible']))
            $visible_filter = $this->db->placehold("AND visible = ?", (int)$filter['visible']);
        
        if (isset($filter['in_info']))
            $in_info_filter = $this->db->placehold("AND in_info = ?", (int)$filter['in_info']);
        
        if (isset($filter['in_register']))
            $in_register_filter = $this->db->placehold("AND in_register = ?", (int)$filter['in_register']);
        
		if(isset($filter['keyword']))
		{
			$keywords = explode(' ', $filter['keyword']);
			foreach($keywords as $keyword)
				$keyword_filter .= $this->db->placehold('
                    AND (
                        name LIKE "%'.$this->db->escape(trim($keyword)).'%" 
                        OR description LIKE "%'.$this->db->escape(trim($keyword)).'%" 
                    )
                ');
		}
        
		if(isset($filter['limit']))
			$limit = max(1, intval($filter['limit']));

		if(isset($filter['page']))
			$page = max(1, intval($filter['page']));
            
        $sql_limit = $this->db->placehold(' LIMIT ?, ? ', ($page-1)*$limit, $limit);

        $query = $this->db->placehold("
            SELECT * 
            FROM __docs
            WHERE 1
                $id_filter
                $visible_filter
                $in_info_filter
                $in_register_filter
                $keyword_filter
            ORDER BY position ASC 
            $sql_limit
        ");
        $this->db->query($query);
        if ($results = $this->db->results())
        {
            foreach ($results as $result)
            {
                $result->filename_short = $this->create_short_filename($result->filename);
                $result->icon = $this->create_icon($result->filename);
            }
        }
        
        return $results;
	}
    
	public function count_docs($filter = array())
	{
        $id_filter = '';
        $visible_filter = '';
        $in_info_filter = '';
        $in_register_filter = '';
        $keyword_filter = '';
        
        if (!empty($filter['id']))
            $id_filter = $this->db->placehold("AND id IN (?@)", array_map('intval', (array)$filter['id']));
		
        if (isset($filter['visible']))
            $visible_filter = $this->db->placehold("AND visible = ?", (int)$filter['visible']);
        
        if (isset($filter['in_info']))
            $in_info_filter = $this->db->placehold("AND in_info = ?", (int)$filter['in_info']);
        
        if (isset($filter['in_register']))
            $in_register_filter = $this->db->placehold("AND in_register = ?", (int)$filter['in_register']);
        
       if(isset($filter['keyword']))
		{
			$keywords = explode(' ', $filter['keyword']);
			foreach($keywords as $keyword)
				$keyword_filter .= $this->db->placehold('
                    AND (
                        name LIKE "%'.$this->db->escape(trim($keyword)).'%" 
                        OR description LIKE "%'.$this->db->escape(trim($keyword)).'%" 
                    )
                ');
		}
                
		$query = $this->db->placehold("
            SELECT COUNT(id) AS count
            FROM __docs
            WHERE 1
                $id_filter
                $visible_filter
                $in_info_filter
                $in_register_filter
                $keyword_filter
        ");
        $this->db->query($query);
        $count = $this->db->result('count');
	
        return $count;
    }
    
    public function add_doc($doc)
    {
		$query = $this->db->placehold("
            INSERT INTO __docs SET ?%, created = NOW()
        ", (array)$doc);
        $this->db->query($query);
        $id = $this->db->insert_id();
//echo __FILE__.' '.__LINE__.'<br /><pre>';var_dump($query);echo '</pre><hr />';
        return $id;
    }
    
    public function update_doc($id, $doc)
    {
		$query = $this->db->placehold("
            UPDATE __docs SET ?% WHERE id = ?
        ", (array)$doc, (int)$id);
        $this->db->query($query);
        
        return $id;
    }
    
    public function delete_doc($id)
    {
		$this->delete_file($id);
        
        $query = $this->db->placehold("
            DELETE FROM __docs WHERE id = ?
        ", (int)$id);
        $this->db->query($query);
    }

    public function delete_file($doc_id)
    {
    	$query = $this->db->placehold("SELECT filename FROM __docs WHERE id = ?", (int)$doc_id);
        $this->db->query($query);
        
        if ($filename = $this->db->result('filename'))
            @unlink($this->config->root_dir.$this->config->docs_files_dir.$filename);
        
        $this->db->query("UPDATE __docs SET filename = '' WHERE id = ?", (int)$doc_id);
    }
    
    public function create_short_filename($filename)
    {
        $filename_short = '';
        
        $ext = pathinfo($filename, PATHINFO_EXTENSION);
        $basename = pathinfo($filename, PATHINFO_FILENAME);
        
        if (strlen($basename) < 28)
            return $filename;
        
        $filename_short = substr($basename, 0, 20);
        $filename_short .= '...';
        $filename_short .= substr($basename, -1, 3);
        $filename_short .= '.'.$ext;
        
    	return $filename_short;
    }
    
    public function create_icon($filename)
    {
    	$ext = pathinfo($filename, PATHINFO_EXTENSION);
        
        switch ($ext):
            
            case 'zip':
                return 'zip.png';
            break;
            
            case 'rar':
                return 'rar.png';
            break;
            
            case 'pdf':
                return 'pdf.png';
            break;
            
            case 'xls':
            case 'xlsx':
                return 'xls.png';
            break;
            
            case 'odt':
            case 'doc':
            case 'docx':
            case 'rtf':
                return 'doc.png';
            break;
            
            case 'txt':
            case 'csv':
                return 'txt.png';
            break;
            
            case 'png':
            case 'gif':
            case 'jpeg':
            case 'jpg':
                return 'jpg.png';
            break;
            
            default:
                return 'file.png';
            
        endswitch;
    }

    /**
     * Получает параметры для PDF документа АСП подписи
     * @param Object $user
     * @param string $sms_code
     * @return array
     */
    public static function getAspParamsByUser(Object $user, string $sms_code = ''): array
    {
        $short_name = $user->lastname . ' ' . mb_substr($user->firstname, 0, 1) . '. ' . mb_substr($user->patronymic, 0, 1) . '.';
        $registration_address = "{$user->Regindex} {$user->Regregion}, {$user->Regcity}, ".
            "{$user->Regstreet} ул, д. {$user->Reghousing}, кв. {$user->Regroom}";

        return [
            'short_name' => $short_name,
            'birth_date' => $user->birth,
            'passport_serial' => $user->passport_serial,
            'passport_issued' => $user->passport_issued,
            'passport_code' => $user->subdivision_code,
            'passport_date' => $user->passport_date,
            'registration_address' => $registration_address,
            'sms_code' => $sms_code,
        ];
    }

    /**
     * Формирует PDF с подписью АСП о частоте взаимодействия с пользователем
     * @param Object $user
     * @param string $zaim_number
     * @return void
     */
    public function get_asp_zaim_pdf(Object $user, string $zaim_number): void
    {
        foreach (self::getAspParamsByUser($user, $_SESSION['sms']) as $param => $value)
        {
            $this->design->assign($param, $value);
        }

        $tpl = $this->design->fetch('pdf/asp_zaim.tpl');

        $this->pdf->create(
            $tpl,
            'СОГЛАСИЕ СУБЪЕКТА НА ИНЫЕ СПОСОБЫ и ЧАСТОТУ ВЗАИМОДЕЙСТВИЯ',
            'asp_zaim_' . $zaim_number . '.pdf',true
        );
    }

    public function getMicroZaimParamsByUser(Object $user, float $loan_amount, bool $is_user_credit_doctor = false, string $asp = null): array
    {
        $full_name = $this->helpers::getFIO($user);
        $passport = $this->users::splitPassportSerial($user->passport_serial);
        return [
            'full_name' => $full_name,
            'birth' => $user->birth,
            'passport_serial' => $passport['serial'],
            'passport_number' => $passport['number'],
            'passport_date' => $user->passport_date,
            'passport_issued' => $user->passport_issued,
            'reg_city' => $user->Regcity,
            'reg_street' => $user->Regstreet,
            'reg_housing' => $user->Reghousing,
            'reg_room' => $user->Regroom,
            'fakt_city' => $user->Faktcity,
            'fakt_street' => $user->Faktstreet,
            'fakt_housing' => $user->Fakthousing,
            'fakt_room' => $user->Faktroom,
            'phone_mobile' => $user->phone_mobile,
            'email' => $user->email,
            'loan_amount' => $loan_amount,
            'is_user_credit_doctor' => $is_user_credit_doctor,
            'asp' => $asp,
            'current_date' => date('d.m.Y')
        ];
    }

    /**
     * Возвращает данные для арбитражного соглашения
     * @param Object $user
     * @param int $order_id
     * @param string|null $sms
     * @param string|null $sign_date
     * @return array
     */
    public function getArbitrationAgreementParams(Object $user, int $order_id, ?string $sms = null, ?string $sign_date = null): array
    {
        $order = $this->orders->get_order($order_id);
        $organization = $this->organizations->get_organization($order->organization_id);

        $loan_type = '';
        if ($order->loan_type === 'PDL') {
            $loan_type = 'микрозайма';
        } elseif ($order->loan_type === 'IL') {
            $loan_type = 'потребительского займа';
        }

        $user_fakt_address = "{$user->Faktindex} {$user->Faktregion}, {$user->Faktcity}, ".
            "{$user->Faktstreet} ул, д. {$user->Fakthousing}, кв. {$user->Faktroom}";

        $user_balance = $this->users->get_user_balance($user->id);

        return [
            'full_name' => $this->helpers::getFIO($user),
            'short_name' => $this->helpers::getShortFIO($user),
            'fakt_address' => $user_fakt_address,
            'birth_place' => $user->birth_place,
            'birth_date' => $user->birth,
            'phone_mobile' => $user->phone_mobile,
            'email' => $user->email,
            'registration_address' => $user->registration_address,
            'passport_serial' => $user->passport_serial,
            'passport_issued' => $user->passport_issued,
            'passport_date' => $user->passport_date,
            'subdivision_code' => $user->subdivision_code,
            'organization_name' => $organization->name,
            'organization_inn' => $organization->inn,
            'organization_kpp' => $organization->kpp ?? 771401001,
            'organization_ogrn' => $organization->ogrn,
            'organization_address' => $organization->address,
            'organization_director' => $organization->director ?? 'Поздняковa С.В.',
            'zaim_date' => $user_balance->zaim_date,
            'sign_date' => $sign_date ?? date('Y-m-d H:i:s'),
            'payment_date' => $user_balance->payment_date,
            'overdue_date' => (new DateTime($user_balance->payment_date))->modify('+1 day'),
            'zaim_number' => $user_balance->zaim_number,
            'loan_type' => $loan_type,
            'accept_sms' => $sms
        ];
    }

    /**
     * Генерирует PDF файл арбитражного соглашения
     * @param Object $user
     * @param int $order_id
     * @param string|null $sms
     * @param bool $storeToDb
     * @return bool
     */
    public function getArbitrationAgreementPdf(Object $user, int $order_id, string $sms = null, bool $storeToDb = false): bool
    {
        $params = $this->docs->getArbitrationAgreementParams($user, $order_id, $sms);

        if ($storeToDb) {
            return $this->documents->create_document([
                'order_id' => $order_id,
                'user_id' => $user->id,
                'contract_number' => $params['zaim_number'],
                'type' => Documents::ARBITRATION_AGREEMENT,
                'params' => $params,
            ]);
        }

        $this->createDocumentForType($params, Documents::ARBITRATION_AGREEMENT);

        return true;
    }

    /**
     * Подготавливает шаблон, заголовок и имя файла для документа на основе переданных параметров и типа
     *
     * @param array $params Параметры для шаблона
     * @param string $type Тип документа
     * @return array
     */
    public function prepareDocumentData(array $params, string $type): array
    {
        $this->design->assignBulk($params);

        $contractParams = $this->documents->get_document_params();
        $tplName = $contractParams[$type][Documents::KEY_TEMPLATE];
        $title = $contractParams[$type][Documents::KEY_NAME];

        $tpl = $this->design->fetch('pdf/' . $tplName);

        return [
            'template' => $tpl,
            'title'    => $title,
            'filename' => $tplName
        ];
    }

    /**
     * Создаёт PDF-документ из шаблона.
     *
     * @param array $params Данные для шаблона
     * @param string $type Тип документа
     * @param string|null $filename Имя файла (если сохраняется)
     * @param string|null $path Путь сохранения
     * @param bool $save Сохранять ли файл
     * @return void
     */
    public function createDocumentForType(array $params, string $type, ?string $filename = null, ?string $path = null, bool $save = false): void
    {
        $doc = $this->prepareDocumentData($params, $type);

        $this->pdf->create(
            $doc['template'],
            $doc['title'],
            $filename ?? $doc['filename'],
            $save,
            ['path' => $path]
        );
    }

    /**
     * Генерирует PDF-документ во временный файл, возвращает его бинарное содержимое.
     *
     * @param string $contractNumber Номер договора
     * @param string $type Тип документа
     * @return string Путь к PDF-файлу
     * @throws Exception При ошибке чтения или сериализации
     */
    public function generateDocumentPdfToFile(string $contractNumber, string $type): string
    {
        $rawParams = $this->documents->getDocument($type, $contractNumber)->params;

        $params = unserialize($rawParams);

        $doc = $this->prepareDocumentData((array) $params, $type);

        $fileName = uniqid('doc_') . '.pdf';
        $customPath = dirname(__DIR__) . '/files/extras_documents';

        $this->pdf->create($doc['template'], $doc['title'], $fileName, true, ['path' => $customPath]);
        $this->pdf->reset();

        return rtrim($customPath, DIRECTORY_SEPARATOR) . DIRECTORY_SEPARATOR . $fileName;
    }
}