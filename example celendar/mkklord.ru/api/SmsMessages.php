<?php
/**
 * Extension for Simpla
 * File is autogenerated 18.05.2021 10:28:50 by CRUD 
 * @author Ruslan Kopyl
 */
require_once 'Simpla.php';

class SmsMessages extends Simpla
{
    /**
     * Шаблон письма сразу после одобрения
     */
    public const AUTO_APPROVE_TEMPLATE_NOW = 17;
    public const AUTO_REJECT_TEMPLATE_NOW = 28;
    public const AUTO_REJECT_TEMPLATE_SECOND = 29;
    public const AUTO_REJECT_TEMPLATE_THIRD = 30;
    public const AUTO_REJECT_TEMPLATE_FOURTH = 40;
    public const AUTO_REJECT_TEMPLATE_FIFTH = 41;
    public const AUTO_REJECT_TEMPLATE_EMERGENCY = 54;
    public const AUTO_REJECT_TEMPLATE_INVALID_PASSPORT = 55;
    public const AUTO_REJECT_TEMPLATE_EXPIRED = 56;

    /**
     * Тип смс для паролей
     */
    public const SMS_PASSWORD_ADD = 'password';

    /** @var string АСП-код авто-одобренной заявки (s_sms_messages.type) */
    public const TYPE_ASP = 'asp';

    /** Шаблон смс об одобрении скористы */
    public const SMS_TEMPLATE_SUCCESS_SCORISTA = 60;

    /** @var string Смс об одобрении скористы */
    public const TYPE_SUCCESS_SCORISTA = 'success_scorista';

    /** @var string Смс об одобрении скористы */
    public const TYPE_SUCCESS_CHANGE_PHONE = 'success_change_phone';

    /**
     * Тип смс при авторизации
     */
    public const TYPE_AUTH = 'auth';

    public function get_sent_sms($phone, $datetime)
    {
        $phone = $this->users->clear_phone($phone);
        
		$query = $this->db->placehold("
            SELECT *
            FROM __sms_messages
            WHERE phone = ?
            AND created > ?
        ", $phone, $datetime);
        $this->db->query($query);
        $results = $this->db->results();
	
        return $results;
    }    
    
	public function get_message($id)
	{
		$query = $this->db->placehold("
            SELECT * 
            FROM __sms_messages
            WHERE id = ?
        ", (int)$id);
        $this->db->query($query);
        $result = $this->db->result();
	
        return $result;
    }
    
	public function get_messages($filter = array())
	{
		$id_filter = '';
        $order_id_filter = '';
        $keyword_filter = '';
        $limit = 1000;
		$page = 1;
        $where = [];

        if (!empty($filter['id']))
            $id_filter = $this->db->placehold("AND id IN (?@)", array_map('intval', (array)$filter['id']));
        
		if (!empty($filter['order_id']))
            $order_id_filter = $this->db->placehold("AND order_id = ?", (int)$filter['order_id']);
        
        if(isset($filter['keyword']))
		{
			$keywords = explode(' ', $filter['keyword']);
			foreach($keywords as $keyword)
				$keyword_filter .= $this->db->placehold('AND (name LIKE "%'.$this->db->escape(trim($keyword)).'%" )');
		}

        if (!empty($filter['type'])) {
            $where[] = $this->db->placehold("type = ?", $filter['type']);
        }

		if(isset($filter['limit']))
			$limit = max(1, intval($filter['limit']));

		if(isset($filter['page']))
			$page = max(1, intval($filter['page']));
            
        $sql_limit = $this->db->placehold(' LIMIT ?, ? ', ($page-1)*$limit, $limit);

        $query = $this->db->placehold("
            SELECT * 
            FROM __sms_messages
            WHERE 1
                $id_filter
                $order_id_filter
				$keyword_filter
                -- {{where}}
            ORDER BY id DESC 
            $sql_limit
        ");

        $query = strtr($query, [
            '-- {{where}}' => !empty($where) ? "AND " . implode(" AND ", $where) : '',
        ]);

        $this->db->query($query);
        $results = $this->db->results();
        
        return $results;
	}
    
	public function count_messages($filter = array())
	{
        $id_filter = '';
        $order_id_filter = '';
        $keyword_filter = '';
        
        if (!empty($filter['id']))
            $id_filter = $this->db->placehold("AND id IN (?@)", array_map('intval', (array)$filter['id']));
		
		if (!empty($filter['order_id']))
            $order_id_filter = $this->db->placehold("AND order_id = ?", (int)$filter['order_id']);
        
        if(isset($filter['keyword']))
		{
			$keywords = explode(' ', $filter['keyword']);
			foreach($keywords as $keyword)
				$keyword_filter .= $this->db->placehold('AND (name LIKE "%'.$this->db->escape(trim($keyword)).'%" )');
		}
                
		$query = $this->db->placehold("
            SELECT COUNT(id) AS count
            FROM __sms_messages
            WHERE 1
                $id_filter
                $order_id_filter
                $keyword_filter
        ");
        $this->db->query($query);
        $count = $this->db->result('count');
	
        return $count;
    }
    
    public function add_message($sms_message)
    {
        $sms_message = (array)$sms_message;
        
        if (empty($sms_message['created']))
            $sms_message['created'] = date('Y-m-d H:i:s');
            
        $sms_message['phone'] = $this->users->clear_phone($sms_message['phone']);

		$query = $this->db->placehold("
            INSERT INTO __sms_messages SET ?%
        ", $sms_message);
        $this->db->query($query);
        $id = $this->db->insert_id();
        
        return $id;
    }
    
    public function update_message($id, $sms_message)
    {
		$query = $this->db->placehold("
            UPDATE __sms_messages SET ?% WHERE id = ?
        ", (array)$sms_message, (int)$id);
        $this->db->query($query);
        
        return $id;
    }
    
    public function delete_message($id)
    {
		$query = $this->db->placehold("
            DELETE FROM __sms_messages WHERE id = ?
        ", (int)$id);
        $this->db->query($query);
    }

    public function get_template($id)
    {
        $query = $this->db->placehold("
            SELECT * 
            FROM __sms_templates
            WHERE id = ?
        ", (int)$id);
        $this->db->query($query);
        $result = $this->db->result();

        return $result;
    }

    /**
     * Последняя смс по типу
     * @param string $phone
     * @param string $type
     * @return false|int
     */
    public function getLastSmsForAuth(string $phone, string $type)
    {
        $query = $this->db->placehold("SELECT * FROM __sms_messages WHERE phone = ? AND type = ? AND is_last_sms = 1 ORDER BY id DESC LIMIT 1", $phone , $type);
        $this->db->query($query);
        return $this->db->result();
    }

    /**
     * Кол-во смс авторизации за день
     * @param string $phone
     * @return int
     */
    public function getAuthTotalTodaySms(string $phone): int
    {
        // ищем последнюю смс
        $query = $this->db->placehold("SELECT COUNT(*) as total 
        FROM __sms_messages 
        WHERE phone = ? 
          AND type = ? 
          AND created >= CURDATE() AND created < CURDATE() + INTERVAL 1 DAY", $phone , self::TYPE_AUTH);

        $this->db->query($query);
        return (int)$this->db->result('total');
    }
}