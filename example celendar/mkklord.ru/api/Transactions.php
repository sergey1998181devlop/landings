<?php
/**
 * Extension for Simpla
 * File is autogenerated 04.03.2020 19:47:18 by CRUD
 * @author Ruslan Kopyl
 */
require_once 'Simpla.php';

class Transactions extends Simpla
{
    /**
     * Тип оплаты для Кредитного рейтинга
     */
    public const PAYMENT_TYPE_CREDIT_RATING_FOR_NK = 'credit_rating_for_nk';
    public const PAYMENT_TYPE_CREDIT_RATING_AFTER_REJECTION = 'credit_rating_after_rejection';
    public const PAYMENT_TYPE_CREDIT_RATING_MAPPING = [
        1 => self::PAYMENT_TYPE_CREDIT_RATING_FOR_NK,
        2 => self::PAYMENT_TYPE_CREDIT_RATING_AFTER_REJECTION
    ];

	public function get_transaction($id)
	{
		$query = $this->db->placehold("
            SELECT * 
            FROM __transactions
            WHERE id = ?
        ", (int)$id);
        $this->db->query($query);
        $result = $this->db->result();

        return $result;
    }

	public function get_payment_id_transaction($payment_id)
	{
		$query = $this->db->placehold("
            SELECT * 
            FROM __transactions
            WHERE payment_id = ?
        ", (int)$payment_id);
        $this->db->query($query);
        $result = $this->db->result();

        return $result;
    }

	public function get_transactions($filter = array())
	{
		$id_filter = '';
        $order_id_filter = '';
        $user_id_filter = '';
        $keyword_filter = '';
        $limit = 1000;
		$page = 1;

        if (!empty($filter['id']))
            $id_filter = $this->db->placehold("AND id IN (?@)", array_map('intval', (array)$filter['id']));

        if (!empty($filter['order_id']))
            $order_id_filter = $this->db->placehold("AND order_id = ?", (int)$filter['order_id']);

        if (!empty($filter['user_id']))
            $user_id_filter = $this->db->placehold("AND user_id = ?", (int)$filter['user_id']);

		if(isset($filter['keyword']))
		{
			$keywords = explode(' ', $filter['keyword']);
			foreach($keywords as $keyword)
				$keyword_filter .= $this->db->placehold('AND (name LIKE "%'.$this->db->escape(trim($keyword)).'%" )');
		}

		if(isset($filter['limit']))
			$limit = max(1, intval($filter['limit']));

		if(isset($filter['page']))
			$page = max(1, intval($filter['page']));

        $sql_limit = $this->db->placehold(' LIMIT ?, ? ', ($page-1)*$limit, $limit);

        $query = $this->db->placehold("
            SELECT * 
            FROM __transactions
            WHERE 1
                $id_filter
                $order_id_filter
                $user_id_filter
                $keyword_filter
            ORDER BY id DESC 
            $sql_limit
        ");
        $this->db->query($query);
        $results = $this->db->results();

        return $results;
	}

	public function count_transactions($filter = array())
	{
        $id_filter = '';
        $order_id_filter = '';
        $user_id_filter = '';
        $keyword_filter = '';

        if (!empty($filter['id']))
            $id_filter = $this->db->placehold("AND id IN (?@)", array_map('intval', (array)$filter['id']));

        if (!empty($filter['order_id']))
            $order_id_filter = $this->db->placehold("AND order_id = ?", (int)$filter['order_id']);

        if (!empty($filter['user_id']))
            $user_id_filter = $this->db->placehold("AND user_id = ?", (int)$filter['user_id']);

        if(isset($filter['keyword']))
		{
			$keywords = explode(' ', $filter['keyword']);
			foreach($keywords as $keyword)
				$keyword_filter .= $this->db->placehold('AND (name LIKE "%'.$this->db->escape(trim($keyword)).'%" )');
		}

		$query = $this->db->placehold("
            SELECT COUNT(id) AS count
            FROM __transactions
            WHERE 1
                $id_filter
                $order_id_filter
                $user_id_filter
                $keyword_filter
        ");
        $this->db->query($query);
        $count = $this->db->result('count');

        return $count;
    }

    public function add_transaction($transaction_data)
    {
        $transaction = (array)$transaction_data;
        $transaction['referer'] = $_SERVER['HTTP_REFERER'] ?? '';

		$query = $this->db->placehold("
            INSERT INTO __transactions SET ?%
        ", $transaction);
        $this->db->query($query);
        $id = $this->db->insert_id();

        return $id;
    }

    public function update_transaction($id, $transaction)
    {
		$query = $this->db->placehold("
            UPDATE __transactions SET ?% WHERE id = ?
        ", (array)$transaction, (int)$id);
        $this->db->query($query);

        return $id;
    }

    public function delete_transaction($id)
    {
		$query = $this->db->placehold("
            DELETE FROM __transactions WHERE id = ?
        ", (int)$id);
        $this->db->query($query);
    }

    public function update_transactions_state(array $transactions)
    {
        foreach ($transactions as $transaction)
        {
            $this->update_transaction_state($transaction);
        }
    }

    public function update_transaction_state($transaction)
    {
        if (!is_numeric($transaction->payment_id))
        {
            return ['error' => 'Не удалось выполнить оплату. ' . $transaction->payment_id];
        }

        if ($transaction->terminal_type == 'ATOP')
            $response = $this->tinkoff->get_state_atop($transaction->payment_id);
        elseif ($transaction->terminal_type == 'IP')
            $response = $this->tinkoff->get_state_ip($transaction->payment_id);
        else
            $response = $this->tinkoff->get_state($transaction->payment_id);

        $response = (array)$response;

        if (empty($response['Success']))
        {
            return $response;
        }

        $this->transactions->update_transaction($transaction->id, array(
            'status' => $response['Status']
        ));

        if (!in_array($response['Status'], ['CONFIRMED', 'AUTHORIZED']))
        {
            return $response;
        }

        if ($transaction->terminal_type == 'IP')
        {
            $this->transactions->update_transaction($transaction->id, array(
                'sended' => 3,
            ));

            $this->individuals->update_order($transaction->individual_id, array(
                'paid' => 1,
                'status' => 9,
            ));

            return $response;
        }

        $result = $this->soap->send_payment_result(
            $transaction,
            $response['Status'] == 'AUTHORIZED'
        );

        $this->transactions->update_transaction($transaction->id, array(
            'sended' => 1,
            'send_result' => isset($result->return) ? $result->return : serialize($result),
        ));

        $balance = $this->users->get_user_balance($transaction->user_id);

        $this->updateBalance($transaction, $balance);
        $this->updateProlongations($transaction, $balance);

        return $response;
    }

    /**
     * Записывает транзакцию в БД
     * @param $transaction
     * @return mixed
     */
    public function addPassportTransaction($transaction)
    {
        $query = $this->db->placehold("INSERT INTO __passport_transactions SET ?%", $transaction);
        $this->db->query($query);

        return $this->db->insert_id();
    }

    /**
     * Получаем транзакции по статусу
     * @param $status
     * @return mixed
     */
    public function getPassportTransactionByStatus($status)
    {
        $query = $this->db->placehold("SELECT * FROM __passport_transactions WHERE status = ?", $status);
        $this->db->query($query);
        return $this->db->results();
    }

    /**
     * Обновляет транзакцию в БД
     * @param $id
     * @param $transaction
     * @return mixed
     */
    public function updatePassportTransaction($id, $transaction)
    {
        $query = $this->db->placehold("UPDATE __passport_transactions SET ?% WHERE id = ?", (array)$transaction, (int)$id);
        $this->db->query($query);
        return $id;
    }

    /**
     * Получает список транзакций по статусу и типу
     * @param string $payment_type
     * @param string $status
     * @return array|false
     */
    public function getTransactionByTypeAndStatus(string $payment_type, string $status) :? array
    {
        $query = $this->db->placehold("SELECT * FROM __transactions WHERE payment_type = ? and status = ?", $payment_type, $status);
        $this->db->query($query);
        return $this->db->results();
    }

    /**
     * Обновляет баланс клиента после оплаты
     */
    private function updateBalance($transaction, $balance): void
    {
        $payUser = $this->users->get_user((int) $transaction->user_id);
        $user_balance_1c = $this->users->get_user_balance_1c($payUser->uid, true);
        $user_balance_1c = $this->users->make_up_user_balance($payUser->id, $user_balance_1c->return);
        $user_balance_1c->last_update = 0;

        $this->createLogFolder();
        $this->logging(__METHOD__, '//1c_user_balance', "user_id: " . $transaction->user_id, $user_balance_1c, 'payment_log/tinkoff_' . date('Y_m_d') . '.txt');

        if (empty($balance)) {
            $this->users->add_user_balance($user_balance_1c);

            $inserted_user_balance = $this->users->get_user_balance($transaction->user_id);
            $this->logging(__METHOD__, '//inserted_local_user_balance', "user_id: " . $transaction->user_id, $inserted_user_balance, 'payment_log/tinkoff_' . date('Y_m_d') . '.txt');
        } else {
            $current_user_balance = $this->users->get_user_balance($transaction->user_id);
            $this->logging(__METHOD__, '//current_local_user_balance', "user_id: " . $transaction->user_id, $current_user_balance, 'payment_log/tinkoff_' . date('Y_m_d') . '.txt');

            $this->users->update_user_balance($balance->id, $user_balance_1c);

            $updated_user_balance = $this->users->get_user_balance($transaction->user_id);
            $this->logging(__METHOD__, '//updated_local_user_balance', "user_id: " . $transaction->user_id, $updated_user_balance, 'payment_log/tinkoff_' . date('Y_m_d') . '.txt');
        }
    }

    /**
     * Обновляет пролонгации после оплаты
     */
    private function updateProlongations($transaction, $balance): void
    {
        $task = $this->tasks->get_current_pr_task($balance->zaim_number, date('Y-m-d'));

        $this->createLogFolder();
        $this->logging(__METHOD__, '//prolongations_current_task', "user_id: " . $transaction->user_id, $task, 'payment_log/tinkoff_' . date('Y_m_d') . '.txt');

        if ($transaction->payment_type == 'debt') {
            if ($balance->zaim_number && $task) {
                $this->tasks->update_pr_task($task->id, [
                    'paid' => $task->od_paid + ($transaction->amount / 100),
                    'prolongation' => $task->prolongation + $transaction->prolongation,
                    'close' => ($transaction->amount / 100) >= ($balance->ostatok_od + $balance->ostatok_peni + $balance->ostatok_percents) ? 1 : 0,
                ]);
            }
        }

        $task = $this->tasks->get_current_pr_task($balance->zaim_number, date('Y-m-d'));
        $this->logging(__METHOD__, '//prolongations_current_task_after_update', "user_id: " . $transaction->user_id, $task, 'payment_log/tinkoff_' . date('Y_m_d') . '.txt');
    }

    private function createLogFolder(): void
    {
        if (!is_dir($this->config->root_dir . 'logs/payment_log/')) {
            mkdir($this->config->root_dir . 'logs/payment_log/');
        }
    }
}
